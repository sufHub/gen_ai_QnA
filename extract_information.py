from pymongo import MongoClient
from langchain.embeddings.openai import OpenAIEmbeddings
from langchain.vectorstores import MongoDBAtlasVectorSearch
from langchain.document_loaders import DirectoryLoader
from langchain.llms import OpenAI
from langchain.chains import RetrievalQA

import gradio as gr
from gradio.themes.base import Base
import key_param

client = MongoClient(key_param.mongo_uri)
dbName = "langchain_demo"
collectionName = "collection_of_text_blobs"
collection = client[dbName][collectionName]

embeddings = OpenAIEmbeddings(openai_api_key = key_param.openai_api_key)

vectorStore = MongoDBAtlasVectorSearch(collection, embeddings)

def query_data(query):
    docs = vectorStore.similarity_search(query, K=1)
    as_output = docs[0].page_content

    llm = OpenAI(openai_api_key=key_param.openai_api_key, temperature=0)
    retriever = vectorStore.as_retriever()
    print(retriever)
    qa = RetrievalQA.from_chain_type(llm, chain_type="stuff", retriever=retriever)
    print(qa)
    retriever_output = qa.run(query)

    return as_output, retriever_output

with gr.Blocks(theme=Base(), title= "Question Answering App using Vector Search + RAG") as demo:
        gr.Markdown(
              """
              # Question Anserwing App using Atlas Vector Search + RAG Architecture
              """
        )
        textbox = gr.Textbox(label="Enter Your Question:")
        with gr.Row():
              button = gr.Button("Submit", variant="primary")
        with gr.Column():
              output1 = gr.Textbox(lines=1, max_lines=10, label="Output with just Atlas Vector Search (return text field is): ")
              output2 = gr.Textbox(lines=1, max_lines=10, label="Output generated by Chaining Atlas Vector Search to LangChain's RetrieverQA + OpenAI LLM")

        button.click(query_data, textbox, outputs=[output1, output2])

demo.launch()
